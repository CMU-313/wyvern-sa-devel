/**
 * A simple integer list abstraction, with functional abstractions for computation
 */

type IntList
	def isEmpty():Bool
	def forEach(f:Int -> Unit):Unit
	def reduce(identity:Int, f:Int -> (Int -> Int)):Int // hack: fix associativity
	
class Cons
	implements IntList // do we want this to be indented?
	
	var v:Int
	var n:IntList
	
	def isEmpty():Bool = false
	def forEach(f:Int -> Unit):Unit =
		f(this.v)
		this.n.forEach(f)
	def reduce(identity:Int, f:Int -> (Int -> Int)):Int =
		val nextResult : Int = this.n.reduce(identity,f)
		f(this.v)(nextResult)
	
	class def make(value:Int,next:IntList):IntList =
		new
			v = value
			n = next
	

class Nil
	implements IntList
	def isEmpty():Bool = true
	def forEach(f:Int -> Unit):Unit = ()
	def reduce(identity:Int, f:Int -> (Int -> Int)):Int = identity
	class def make():IntList = new
	
val nil : IntList = Nil.make()
	
// Test code

val noLink : IntList = Nil.make()
val aLink : IntList = Cons.make(2, noLink)
val aLink2 : IntList = Cons.make(1, aLink)
//aLink2.forEach(fn x:Int => printInteger(x))
aLink2.reduce(0,fn x:Int => fn y:Int => x+y)