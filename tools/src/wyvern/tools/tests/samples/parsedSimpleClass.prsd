{$I {$L type IntCell {$I {$L var contents : Int $L} $I} $L} {$L type Stack {$I {$L prop top : Int ? $L} {$L meth push (element : Int) $L} {$L meth pop () : Int ? $L} $I} $L} {$L type StackFactory {$I {$L meth Stack () : Stack $L} {$L meth StackWithFirst (firstElement : Int) : Stack $L} $I} $L} {$L type ListUtilities {$I {$L meth map (f : Int -> Int , l : IntList) : IntList $L} $I} $L} {$L class StackImpl {$I {$L implements Stack $L} {$L class implements StackFactory $L} {$L var list : Link ? $L} {$L meth top () : Int ? = list . data $L} {$L meth push (element : Int) {$I {$L list = Link (element , list) $L} $I} $L} {$L meth pop () : Int ? {$I {$L val result = list . data $L} {$L list = list . next $L} {$L result $L} $I} $L} {$L class meth Stack () : Stack = new StackImpl $L} {$L class meth StackWithFirst (firstElement : Int) : Stack {$I {$L new StackImpl {$I {$L list = Link (firstElement , null) $L} $I} $L} $I} $L} $I} $L} {$L class Link {$I {$L val data : Int $L} {$L val next : Link ? $L} $I} $L} {$L meth stackClient () {$I {$L val s = StackImpl . Stack () $L} {$L s . push (5) $L} {$L printInteger (s . top) $L} $I} $L} $I}