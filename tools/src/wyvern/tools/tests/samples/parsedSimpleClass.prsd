{$I {$L type IntCell {$I {$L var contents : Int $L} $I} $L} {$L type Stack {$I {$L prop top : Int ? $L} {$L fun push (element : Int) $L} {$L fun pop () : Int ? $L} $I} $L} {$L type StackFactory {$I {$L fun Stack () : Stack $L} {$L fun StackWithFirst (firstElement : Int) : Stack $L} $I} $L} {$L class Link {$I {$L val data : Int $L} {$L val next : Link ? $L} {$L class fun Link (d : Int , n : Link ?) : Link {$I {$L new {$I {$L data = d $L} {$L next = n $L} $I} $L} $I} $L} $I} $L} {$L class StackImpl {$I {$L implements Stack $L} {$L class implements StackFactory $L} {$L var list : Link ? $L} {$L fun top () : Int ? = this . list . data $L} {$L fun push (element : Int) : Unit {$I {$L this . list = Link . Link (element , (this . list)) $L} $I} $L} {$L fun pop () : Int ? {$I {$L val result : Int = this . list . data $L} {$L this . list = this . list . next $L} {$L result $L} $I} $L} {$L class fun Stack () : Stack = new $L} {$L class fun StackWithFirst (firstElement : Int) : Stack {$I {$L new {$I {$L list = Link (firstElement , null) $L} $I} $L} $I} $L} $I} $L} {$L fun stackClient () {$I {$L val s : Stack = StackImpl . Stack () $L} {$L s . push (5) $L} {$L printInteger (s . top ()) $L} {$L val addOne : Int -> Int = fn x : Int => x + 1 $L} {$L printInteger (addOne (s . pop ())) $L} $I} $L} $I}