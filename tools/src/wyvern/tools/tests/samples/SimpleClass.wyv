/** MODULE: Simple Wyvern class example from http://www.cs.cmu.edu/~aldrich/securemobileweb/spec-rationale.html **/


/** Public Interface **/
type IntCell
	var contents : Int

type Stack
	def top() : Int?
	def push(element : Int)
	def pop() : Int?

type StackFactory
	def Stack() : Stack
	def StackWithFirst(firstElement : Int) : Stack


/** Private Implementation **/
class Link
	val data : Int
	val next : Link?

	class def Link(d:Int, n:Link?) : Link
		new
			data=d
			next=n


class StackImpl
	implements Stack
	class implements StackFactory

	var list : Link?

	def top() : Int? = this.list.data

	def push(element : Int) : Unit
		this.list = Link.Link(element, (this.list))

	def pop() : Int?
		val result : Int = this.list.data
		this.list = this.list.next
		result

	class def Stack() : Stack = new
	
	class def StackWithFirst(firstElement : Int) : Stack
		new
			list = Link(firstElement, null)


def stackClient()
	val s : Stack = StackImpl.Stack()
	s.push(5)
	printInteger(s.top())
	val addOne:Int->Int = fn x:Int => x+1
	printInteger(addOne(s.pop()))